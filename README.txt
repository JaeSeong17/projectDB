TEAM-19 (안재성, 윤상현)
Github address (https://github.com/JaeSeong17/projectDB)

//mysql Database 설명
테이블 구성 (총 12개의 테이블로 구성)
-CUSTOMER
	-회원 정보 테이블
	-속성 : *사용자 아이디(PK), *사용자 비밀번호, *주소, *핸드폰 번호, 성, 이름, 성별, 생년월일, 직업 (*표는 필수 정보)

-ADMIN
	-관리자 정보 테이블
	-속성 : 관리자 아이디, 관리자 비밀번호

-RETAILER
	-매장, 지점의 정보 테이블
	-속성 : 매장 고유번호, 매장 주소

-ITEM
	-상품 정보 테이블
	-속성 : 상품 번호, 상품명, 제조일, 유통기한, 수입자, 가격, 생산지

-SHOPPINGBAG
	-장바구니 정보 테이블
	-속성 : 사용자 아이디, 상품 번호, 장바구니에 추가한 상품 개수

-ORDERED
	-주문기록 정보 테이블
	-속성 : 주문번호, 사용자 아이디, 주문 매장번호, 주문 날짜

-ORDERED_PRODUCT
	-상품 주문 정보 테이블
	-속성 : 주문번호, 상품번호, 주문한 상품 개수

-CATEGORY
	-해당 상품 카테고리 정보 테이블
	-속성 : 상품번호, 소분류 번호, 대분류 번호

-MAJOR_CATEGORY
	-대분류 정보 테이블
	-속성 : 대분류 태그, 대분류 번호

-MINOR_CATEGORY
	-소분류 정보 테이블 
	-속성 : 소분류 태그, 소분류 번호, 상위 대분류 번호

-PRODUCERLOCATION
	-생산자 혹은 소재지 정보 테이블
	-속성 : 고유번호, 생산자명, 지역

-STOCK_DATA
	-매장별 재고 정보 테이블
	-속성 : 매장 고유번호(PK), 상품 고유번호(PK), 재고 수 


//각 테이블 별 인덱스 설명
RETAILER table - (Address) index
	매장,지점 에 대한 정보 검색시 해당 지점의 고유 번호를 찾는 것보다 지역별 검색이 더 효율적이라고 판단하였습니다

PRODUCERLOCATION table - (Location) index
	소재지 및 생산지에 대한 정보 검색시 고유번호보다 지역별 검색이 더 효율적이라 판단하였습니다

STOCK_DATA - (Product_number) index
	각 제품마다 매장에 남아있는 재고를 확인하는게 효율적이라 판단하였습니다
	
CUSTOMER - (Sex, Birthdate) index
	매장측에서 고객의 고유적인 정보 이외, 추천상품이나 고객의 관심에 대한 정보에 대해서 기능을 구현하고자 할때는 고객들의 연령대와 성별에 따른 정렬이 더 의미있다고 판단했습니다. - (성별과 연령대별 상품에 대한 관심이 다르고, 가장 의미 있는 분류라고 판단)

ITEM - (Product_name)
	상품에 대한 정보 요청 쿼리시에 가장 많이 사용된 속성으로 '상품명'이 있었기 때문에 인덱싱이 필요하다고 판단했습니다

SHOPPINGBAG - Product_number
	현재 장바구니에 가장 많이 담긴 제품, 현재 사용자들에게 가장 관심도가 높은 제품 과같은 정보 도출시에 필요한 인덱스라고 판단했습니다

MAJOR_CATEGORY - Major_tag
	대분류의 고유번호만큼 대분류 라벨명도 쿼리 처리시 사용빈도가 높다고 판단했습니다

MINOR_CATEGORY - Minor_tag
	소분류의 고유번호만큼 소분류 라벨명도 쿼리 처리시 사용빈도가 높다고 판단했습니다

CATEGORY - Major_number, Minor_number
	대분류, 소분류에 따라 상품을 인덱싱 하는게 분류에 따른 상품 검색시에 효율성을 상당부분 높일수 있습니다

ORDERED - Cus_id
	구매기록 번호 보다 구매자 별로 인덱싱을 하는게 의미있는 쿼리(구매자의 선호 상품, 구매빈도 등) 도출시 효율적이라고 판단햇습니다

	


//인터페이스 설명
프로그램 구성
-로그인창 login_win
	-아이디와 비밀번호 입력란, 로그인 버튼, 회원가입 버튼으로 구성되어 있습니다
	-해당 입력란에 입력된 정보를 바탕으로 로그인을 시도합니다
	-일반회원 정보와 일치하는 정보가 없을시 로그인에 실패하고, 일치하는 정보가 있을경우 일반회원 인터페이스로 연결됩니다.
	-회원가입 버튼을 누르면 회원가입 창이 팝업되어 가입 진행
	-관리자 계정으로 로그인 진행시에 관리자 인터페이스로 연결됩니다
	
-회원가입 Register_win
	-로그인창에서 회원가입 버튼을 누르면 팝업됩니다
	-사용자 아이디, 비밀번호, 주소, 전화번호, 성, 이름, 성별, 생년월일, 직업 을 적을수 있습니다
	-필수정보 (사용자 아이디, 비밀번호, 주소, 전화번호)에는 *표시가 되어있으며 작성해야지만 가입을 진행할 수 있습니다
	-사용자 아이디는 unique attribute 이기 때문에 중복체크를 진행하여야 하고 통과해야지만 가입을 진행할 수 있습니다
	-주소정보와 성별 생년월일은 JComboBox를 활용하여 정해진 형식에 맞는 데이터가 입력될수 있도록 하였습니다


-일반 회원 인터페이스 customer_interface
	-일반회원 인터페이스는 3가지 탭(상품정보, 장바구니, 계정정보)으로 구성됩니다.
	-상단에 접속한 날짜, 본인의 사용자 아이디가 출력됩니다.

	-상품 정보 탭
		-아이템 정보를 확인하고 장바구니에 추가할수있는 탭입니다
		-탭으로 대분류, 소분류를 구분할 수 있습니다.
		-테이블에서 아이템을 선택한후 갯수를 정하고 버튼을 통해 장바구니로 정보를 넘깁니다.

 	-장바구니 탭
		=장바구니 정보를 표출합니다
		-PRODUCT창에서 바꾼 정보를 갱신할 방법이 마땅치않아 REFRESH버튼을 만들었습니다
		-PURCHASE버튼을 통해 주문을 할 수있으며, 재고가 부족할시 경고가 뜨며 처리이전의 상태로 ROLLBACK됩니다.

	-계정정보 탭 (조회/수정 모드)
		-회원이 본인의 계정정보를 조회하고 수정, 구매이력을 확인할수 있는 탭입니다
		-왼쪽 측이 계정정보 확인 패널 , 오른쪽 측이 구매 이력 확인 패널로 구성되어 있습니다.

		//계정정보 확인 패널
		-처음 탭을 누르면 조회모드로 출력됩니다.
		-계정정보 확인패널에서 change버튼을 클릭시 정보 수정모드로 전환되며 아이디를 제외한 정보들을 수정할 수 있습니다.
		-수정모드에서는 본인의 정보를 수정할 수 있습니다
		-필수정보 입력란은 반드시 채워야 합니다.
		-필수정보 입력란 이외의 정보에 대해서는 비워두는 등 자유롭게 수정이 가능합니다
		-수정할 정보를 입력후 confirm버튼을 누르면 최종확인 창이 팝업된후 Database에서 수정이 진행됩니다.
		-cancel 버튼을 누르면 수정이 진행되지않고 다시 조회모드로 전환됩니다.
		-정상적으로 수정이 완료되면 개인정보 탭이 조회모드로 다시 전환되며 수정된 정보를 확인할 수 있습니다.

		//구매이력 확인 패널
		-구매이력 확인 패널은 자신이 구매했던 상품과 구매수, 구매날짜를 확인할 수 있습니다
		-자신이 원하는 속성 헤더를 클릭하며 정렬된 정보를 확인할 수 있습니다
		-구매이력 정보가 출력되는 테이블 아래측에 있는 입력란을 통해 자신의 구매이력을 검색할 수 있습니다.


-관리자 인터페이스 admin_interface
	-관리자 인터페이스는 2가지 탭(재고정보, 매출)으로 구성됩니다
	
	-재고정보 탭
		테이블에서 아이템을 선택하고 갯수를 정한후 order버튼을 클릭하고 이후 나오는 창에서 매장을 선택하고 ok버튼을 누르면 재고추가완료

	-매출 탭






